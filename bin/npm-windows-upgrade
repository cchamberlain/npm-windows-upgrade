#! /usr/bin/env node

var spawn = require('child_process').spawn,
    exec = require('child_process').exec,
    path = require('path'),
    chalk = require('chalk'),
    inquirer = require('inquirer'),
    Spinner = require('cli-spinner').Spinner,
    package = require('../package.json'),
    isWin = /^win/.test(process.platform),
    args = process.argv;

// Helper functions
function runPowershell(version, nodePath, cb) {
    var scriptPath = path.resolve(__dirname, '../powershell/upgrade-npm.ps1');

    var specialArgs = nodePath == null ?
      '& {& \'' + scriptPath + '\' -version \'' + version + '\' }' :
      '& {& \'' + scriptPath + '\' -version \'' + version + '\' -NodePath \'' + nodePath + '\' }';

    var psArgs = ['-NoProfile', '-NoLogo', specialArgs];
    var child = spawn('powershell.exe', psArgs);

    var output = [];

    if(nodePath)
      console.log('powershell executed with args: ' + psArgs.join(' '));

    child.stdout.on('data', function (data) {
        output.push(data.toString());
    });

    child.stderr.on('data', function (data) {
        console.log('Error: ', data.toString());
        output.push(data.toString());
    });

    child.on('exit', function () {
        cb(output);
    });

    child.stdin.end();
}



function getAvailableVersions(cb) {
    exec('npm view npm versions --json', function (err, stdout) {
        if (err) {
            return console.error(chalk.red.bold('We could not show latest available versions. Try running this script again with the version you want to install (npm-windows-upgrade --version:3.0.0'));
        }

        cb(JSON.parse(stdout));
    });
}

function checkForInternet(cb) {
    require('dns').lookup('microsoft.com', function (err) {
        if (err && err.code === 'ENOTFOUND') {
            cb(false);
        } else {
            cb(true);
        }
    });
}

function getNodePath(cb) {
  exec('npm config --global get prefix', function(err, stdout) {
    if (err) {
      console.log('Could not determine nodejs install location, will default to a program files directory.');
      cb(null);
    } else {
      cb(stdout);
    }
  });
}

function upgradeNPM(version) {
    var spinner = new Spinner('Upgrading.. %s');
    spinner.start();

    getNodePath(function(nodePath) {
      runPowershell(version, nodePath, function (output) {
        spinner.stop(false);
        console.log('\n');

        if (output[0] && output[0].indexOf('You must be administrator to run this script') > -1) {
            console.log(chalk.bold.red('Upgrade aborted: You must be administrator to run this script. Upgrade aborted.'));
        } else if (output[output.length - 1].indexOf('All done!') > -1) {
            console.log(chalk.bold.green('Upgrade finished. Have a nice day!'));
        } else {
            console.log(chalk.bold.red('An unknown error occurred. The output of the upgrader script was: '));
            console.log(output);
        }
      });
  });
}

function checkExecutionPolicy(cb) {
    var child = spawn('powershell.exe', ['-NoProfile', '-NoLogo', 'Get-ExecutionPolicy']),
        output = [], unrestricted, i;

    child.stdout.on('data', function (data) {
        output.push(data.toString());
    });

    child.stderr.on('data', function (data) {
        output.push(data.toString());
    });

    child.on('exit', function () {
        unrestricted = false;

        for (i = output.length - 1; i >= 0; i = i - 1) {
            if (output[i].indexOf('Unrestricted') > -1) {
                unrestricted = true;
                break;
            }
        }

        if (!unrestricted) {
            cb(false);
        } else {
            cb(true);
        }
    });

    child.stdin.end();
}

// Check OS
if (!isWin) {
    throw('This script upgrades npm on Windows, but the OS is not Windows.');
}

// Print version
console.log(chalk.yellow.bold('npm-windows-upgrade ' + package.version));

// Execute
inquirer.prompt({type: 'confirm', name: 'c', message: 'This tool will upgrade npm. Do you want to continue?'}, function (response) {
    if (!response.c) {
        return console.log(chalk.bold.green('Well then, we\'re done here. Have a nice day!'));
    }

    checkExecutionPolicy(function (isUnrestricted) {
        if (!isUnrestricted) {
            console.log(chalk.red.bold('Scripts cannot be executed on this system.'));
            console.log('To fix this issue, please run the command below as Administrator and try again:');
            console.log('Set-ExecutionPolicy Unrestricted -Scope CurrentUser');
            return;
        }

        checkForInternet(function (isOnline) {
            var version = (args[2] && args[2].indexOf('--version:') > -1) ? args[2].slice(10) : null;

            if (!isOnline) {
                return console.err(chalk.bold.red('We have trouble connecting to the Internet, aborting'));
            }

            if (version) {
                upgradeNPM(version);
            } else {
                getAvailableVersions(function (versions) {
                    var versionList = [{
                        type: 'list',
                        name: 'version',
                        message: 'Which version do you want to install?',
                        choices: versions.reverse()
                    }];

                    inquirer.prompt(versionList, function (answer) {
                        if (!answer.version) {
                            return console.err(chalk.bold.red('Could not determine version that should be installed. Aborting'));
                        }

                        upgradeNPM(answer.version);
                    });
                });
            }
        });
    });
});
